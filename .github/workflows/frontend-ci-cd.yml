name: Frontend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend-app/**'
      - '.github/workflows/frontend-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend-app/**'
      - '.github/workflows/frontend-ci-cd.yml'

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend-app/package-lock.json

      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --production --audit-level=high
        continue-on-error: true
        
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        with:
          args: --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend-app/package-lock.json

      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npx eslint . --ext .js,.jsx,.ts,.tsx || true
        
      - name: Run TypeScript type check
        run: npx tsc --noEmit

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [security-scan, lint]
    # Only run this job on main branch pushes or PRs to main
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.base_ref == 'main')
    defaults:
      run:
        working-directory: ./frontend-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend-app/package-lock.json

      - name: Install dependencies
        run: npm ci
        
      - name: List directory contents before build
        run: ls -la
        
      - name: Build application
        run: npm run build
        env:
          # Use GitHub Secrets for sensitive data
          # No sensitive data should be hardcoded in workflows
          NEXT_PUBLIC_API_URL: https://api-staging.clera.ai
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PPLX_API_KEY: ${{ secrets.PPLX_API_KEY }}
          KV_REST_API_URL: ${{ secrets.KV_REST_API_URL }}
          KV_REST_API_TOKEN: ${{ secrets.KV_REST_API_TOKEN }}
          # Add any other required secrets here
        
      - name: List directory contents after build
        run: |
          echo "Current directory:"
          ls -la
          echo "Checking if .next directory exists:"
          if [ -d ".next" ]; then
            echo ".next directory exists, showing contents:"
            ls -la .next
          else
            echo ".next directory not found!"
            echo "Checking parent directory:"
            ls -la ..
          fi
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build-${{ github.run_id }}
          path: frontend-app/.next
          retention-days: 3
          if-no-files-found: warn # Changed to warn instead of error to see the full logs

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: nextjs-build-${{ github.run_id }}
          path: frontend-app/.next
          
      - name: Verify artifact download
        run: |
          cd frontend-app
          if [ ! -d ".next" ] || [ -z "$(ls -A .next)" ]; then
            echo "The .next directory is empty or doesn't exist. Artifact download may have failed."
            echo "Current directory contents:"
            ls -la
            exit 1
          else
            echo "Build artifacts successfully downloaded."
            ls -la .next
          fi
          
      - name: Install production dependencies
        run: |
          cd frontend-app
          npm ci --production
        
      - name: Deploy to Vercel (staging)
        id: deploy-staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend-app
          vercel-args: '--prod'
          
      - name: Log Deployment URL
        run: |
          echo "Deployed to staging environment: ${{ steps.deploy-staging.outputs.preview-url }}"
          # Store the URL for use in other jobs or for notifications
          echo "STAGING_URL=${{ steps.deploy-staging.outputs.preview-url }}" >> $GITHUB_ENV
  
  wait-for-approval:
    name: Wait for Production Approval
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production-approval
    steps:
      - name: Production Approval
        run: echo "Production deployment has been manually approved at $(date)"
          
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [wait-for-approval]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    # This ensures manual approval before deploying to production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: nextjs-build-${{ github.run_id }}
          path: frontend-app/.next
          
      - name: Verify artifact download
        run: |
          cd frontend-app
          if [ ! -d ".next" ] || [ -z "$(ls -A .next)" ]; then
            echo "The .next directory is empty or doesn't exist. Artifact download may have failed."
            echo "Current directory contents:"
            ls -la
            exit 1
          else
            echo "Build artifacts successfully downloaded."
            ls -la .next
          fi
          
      - name: Install production dependencies
        run: |
          cd frontend-app
          npm ci --production
        
      - name: Deploy to Vercel (production)
        id: deploy-production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend-app
          vercel-args: '--prod'
          alias-domains: |
            app.clera.ai
            
      - name: Log Deployment URL
        run: |
          echo "Deployed to production environment: ${{ steps.deploy-production.outputs.preview-url }}" 