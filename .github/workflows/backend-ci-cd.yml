name: Backend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: Run Bandit (Security static analysis)
        run: bandit -r . -x ./tests,./venv,./conversational_ai/tests,./clera_agents/tests,./.venv
        continue-on-error: true
        
      - name: Check dependencies for vulnerabilities
        run: safety check -r requirements.txt
        continue-on-error: true
        
      - name: Run Semgrep for security scanning
        uses: semgrep/semgrep-action@v1
        with:
          config: p/owasp-top-ten
          output: semgrep-results.sarif
          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep

  lint:
    name: Linting and Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black

      - name: Run Flake8
        run: flake8 . --exclude=.venv,venv,__pycache__,tests
        continue-on-error: true
        
      - name: Run Black (check formatting)
        run: black --check --exclude="/(\.venv|venv|__pycache__|tests)/" .
        continue-on-error: true

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [security-scan, lint]
    defaults:
      run:
        working-directory: ./backend
    services:
      redis:
        image: redis:6.2.17
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      PYTHONPATH: ${{ github.workspace }}/backend
      # Environment variables redacted for security
      # Use GitHub Secrets for sensitive data
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # In case pytest is not already in requirements.txt
          pip install pytest pytest-cov

      - name: Run pytest
        run: |
          # Check if tests directory exists before running tests
          if [ -d "tests" ] || [ -d "clera_agents/tests" ] || [ -d "conversational_ai/tests" ]; then
            pytest --cov=. --cov-report=xml
          else
            echo "No test directories found. Skipping tests."
            # Create an empty coverage report so the next step doesn't fail
            echo '<?xml version="1.0" ?><coverage version="5.5"></coverage>' > coverage.xml
          fi
        
      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          fail_ci_if_error: false

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/clera-backend:latest
            ghcr.io/${{ github.repository_owner }}/clera-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON('["' + github.event.repository.updated_at + '"]')[0] }}
            VERSION=${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/clera-backend:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          # This could use curl, AWS CLI, or specialized GitHub Actions
          
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    # This ensures manual approval before deploying to production
    # Create this environment in GitHub repository settings
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here 