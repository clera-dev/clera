name: Backend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: Run Bandit (Security static analysis)
        run: bandit -r . -x ./tests,./venv,./conversational_ai/tests,./clera_agents/tests,./.venv
        continue-on-error: true
        
      - name: Check dependencies for vulnerabilities
        run: safety check -r requirements.txt
        continue-on-error: true
        
      - name: Run Semgrep for security scanning
        uses: semgrep/semgrep-action@v2
        with:
          config: p/owasp-top-ten
          output: semgrep-results.sarif
          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3.25.15
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep

  lint:
    name: Linting and Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7

      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black

      - name: Run Flake8
        run: flake8 . --exclude=.venv,venv,__pycache__,tests
        continue-on-error: true
        
      - name: Run Black (check formatting)
        run: black --check --exclude="/(\.venv|venv|__pycache__|tests)/" .
        continue-on-error: true

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [security-scan, lint]
    defaults:
      run:
        working-directory: ./backend
    services:
      redis:
        image: redis:6.2.17
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      PYTHONPATH: ${{ github.workspace }}/backend
      # Environment variables redacted for security
      # Use GitHub Secrets for sensitive data
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      # WebSocket testing environment variables
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      WEBSOCKET_SERVICE_URL: localhost:8001
      WEBSOCKET_TIMEOUT: 300
      WEBSOCKET_CONNECT_TIMEOUT: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7

      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # In case pytest is not already in requirements.txt
          pip install pytest pytest-cov

      - name: Run pytest
        run: |
          # Check if tests directory exists before running tests
          if [ -d "tests" ] || [ -d "clera_agents/tests" ] || [ -d "conversational_ai/tests" ]; then
            pytest --cov=. --cov-report=xml
          else
            echo "No test directories found. Skipping tests."
            # Create an empty coverage report so the next step doesn't fail
            echo '<?xml version="1.0" ?><coverage version="5.5"></coverage>' > coverage.xml
          fi
        
      - name: Upload coverage report
        uses: codecov/codecov-action@v4.5.0
        with:
          file: ./backend/coverage.xml
          fail_ci_if_error: false

  docker-build-dry-run:
    name: Docker Build Dry-Run (PR)
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.4.0

      # Build API service image (no push)
      - name: Build API service image
        uses: docker/build-push-action@v6.5.0
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: ghcr.io/${{ github.repository_owner }}/clera-backend:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha,scope=api-service-pr
          cache-to: type=gha,mode=max,scope=api-service-pr
          build-args: |
            BUILDTIME=${{ github.event.pull_request.updated_at }}
            VERSION=${{ github.sha }}

      # Build WebSocket service image (no push)
      - name: Build WebSocket service image
        uses: docker/build-push-action@v6.5.0
        with:
          context: ./backend
          file: ./backend/Dockerfile.websocket
          push: false
          tags: ghcr.io/${{ github.repository_owner }}/clera-backend-websocket:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha,scope=websocket-service-pr
          cache-to: type=gha,mode=max,scope=websocket-service-pr
          build-args: |
            BUILDTIME=${{ github.event.pull_request.updated_at }}
            VERSION=${{ github.sha }}

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.4.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push the API service image
      - name: Build and push API service image
        uses: docker/build-push-action@v6.5.0
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/clera-backend:latest
            ghcr.io/${{ github.repository_owner }}/clera-backend:${{ github.sha }}
          cache-from: type=gha,scope=api-service
          cache-to: type=gha,mode=max,scope=api-service
          build-args: |
            BUILDTIME=${{ github.event.repository.updated_at }}
            VERSION=${{ github.sha }}

      # Build and push the WebSocket service image
      - name: Build and push WebSocket service image
        uses: docker/build-push-action@v6.5.0
        with:
          context: ./backend
          file: ./backend/Dockerfile.websocket
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/clera-backend-websocket:latest
            ghcr.io/${{ github.repository_owner }}/clera-backend-websocket:${{ github.sha }}
          cache-from: type=gha,scope=websocket-service
          cache-to: type=gha,mode=max,scope=websocket-service
          build-args: |
            BUILDTIME=${{ github.event.repository.updated_at }}
            VERSION=${{ github.sha }}

      # Scan the API service image for vulnerabilities
      - name: Run Trivy vulnerability scanner on API service
        uses: aquasecurity/trivy-action@0.21.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/clera-backend:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-api.sarif'
          severity: 'CRITICAL,HIGH'

      # Scan the WebSocket service image for vulnerabilities
      - name: Run Trivy vulnerability scanner on WebSocket service
        uses: aquasecurity/trivy-action@0.21.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/clera-backend-websocket:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-websocket.sarif'
          severity: 'CRITICAL,HIGH'

      # Upload API service vulnerability scan results
      - name: Upload API service Trivy scan results
        uses: github/codeql-action/upload-sarif@v3.25.15
        with:
          sarif_file: 'trivy-results-api.sarif'
          category: trivy-api

      # Upload WebSocket service vulnerability scan results
      - name: Upload WebSocket service Trivy scan results
        uses: github/codeql-action/upload-sarif@v3.25.15
        with:
          sarif_file: 'trivy-results-websocket.sarif'
          category: trivy-websocket

  deploy-to-aws:
    name: Deploy to AWS with Copilot
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          # Note: Ensure you have AWS_ACCOUNT_ID and other necessary secrets configured in your GitHub repository settings.
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsOIDCRole
          aws-region: us-west-1
      
      - name: Install AWS Copilot CLI
        run: |
          curl -Lo copilot https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux
          chmod +x copilot
          sudo mv copilot /usr/local/bin/copilot
          copilot --version
      
      - name: Checkout code (for Copilot manifest files)
        uses: actions/checkout@v4.1.7
      
      - name: Deploy services
        run: |
          cd backend
          echo "Deploying websocket-lb-service..."
          copilot svc deploy --name websocket-lb-service --env production
          
          echo "Deploying api-service..."
          copilot svc deploy --name api-service --env production
      
      - name: Verify deployment
        run: |
          echo "Checking service status..."
          copilot svc status --name websocket-lb-service
          copilot svc status --name api-service