# Buildspec runs in the build stage of your pipeline.
version: 0.2
phases:
  install:
    commands:
      - echo "cd into $CODEBUILD_SRC_DIR"
      - cd $CODEBUILD_SRC_DIR
      - cd backend
      # Download the copilot linux binary.
      - wget -q https://ecs-cli-v2-release.s3.amazonaws.com/copilot-linux-v1.34.1 -O copilot-linux
      - chmod +x ./copilot-linux
  build:
    commands:
      - echo "Run your tests"
      # - make test
  post_build:
    commands:
      - ls -l
      - export COLOR="false"
      - export CI="true"
      - echo "Parsing pipeline manifest"
      - cat copilot/pipelines/clera-main/manifest.yml
      - pipeline=$(cat copilot/pipelines/clera-main/manifest.yml | ruby -ryaml -rjson -e 'puts JSON.pretty_generate(YAML.load(ARGF))')
      - echo "Pipeline JSON:"
      - echo "$pipeline"
      - pl_envs=$(echo $pipeline | jq -r '.stages[].name')
      - 'echo "Environment names: $pl_envs"'
      # Find all the local services in the workspace.
      - svc_ls_result=$(./copilot-linux svc ls --local --json)
      - svc_list=$(echo $svc_ls_result | jq '.services')
      - |
          if [ ! "$svc_list" = null ]; then
            svcs=$(echo $svc_ls_result | jq -r '.services[].name')
            echo "Found services: $svcs"
          fi
      # Find all the local jobs in the workspace.
      - job_ls_result=$(./copilot-linux job ls --local --json)
      - job_list=$(echo $job_ls_result | jq '.jobs')
      - |
          if [ ! "$job_list" = null ]; then
            jobs=$(echo $job_ls_result | jq -r '.jobs[].name')
            echo "Found jobs: $jobs"
          fi
      # Raise error if no services or jobs are found.
      - if [ "$svc_list" = null ] && [ "$job_list" = null ]; then echo "No services or jobs found for the pipeline to deploy. Please create at least one service or job and push the manifest to the remote." 1>&2; exit 1; fi
      # Generate the cloudformation templates.
      - >-
          for env in $pl_envs; do
            tag=$(echo ${CODEBUILD_BUILD_ID##*:}-$env | sed 's/:/-/g' | rev | cut -c 1-128 | rev)
            for svc in $svcs; do
              echo "Packaging service $svc for environment $env with tag $tag"
              ./copilot-linux svc package -n $svc -e $env --output-dir './infrastructure' --tag $tag --upload-assets
              if [ $? -ne 0 ]; then
                echo "Cloudformation stack and config files were not generated. Please check build logs to see if there was a manifest validation error." 1>&2
                exit 1
              fi
            done
            for job in $jobs; do
              echo "Packaging job $job for environment $env with tag $tag"
              ./copilot-linux job package -n $job -e $env --output-dir './infrastructure' --tag $tag --upload-assets
              if [ $? -ne 0 ]; then
                echo "Cloudformation stack and config files were not generated. Please check build logs to see if there was a manifest validation error." 1>&2
                exit 1
              fi
            done
          done
      - ls -lah ./infrastructure
artifacts:
  base-directory: backend
  files:
    - "infrastructure/*"
